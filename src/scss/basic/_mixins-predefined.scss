// ==============================
// Mixins predefinidos aplicables 
// a cualquier proyecto
// ==============================


// -------------------------------
// RESET, uso: @include reset(ul);
// -------------------------------
@mixin reset($type){
    $resets: (
        ul: (
            list-style: none,
            margin: 0,
            padding: 0,
            li: (
                margin: 0,
                padding: 0
            )
        ),
        ol: (
            list-style: none,
            margin: 0,
            padding: 0,
            li: (
                margin: 0,
                padding: 0
            )
        ),
        ul-row: (
            list-style: none,
            //margin: 0,
            padding: 0,
            li: (
                margin: 0,
                //padding: 0
            )
        ),
        position: (
            position: relative !important,
            top: auto !important,
            bottom: auto !important,
            left: auto !important,
            right: auto !important
        )
    );
    
    @each $prop, $value in map-get($resets, $type) {
        @if type-of($value) == 'map' {
            & > #{$prop} {
                @each $sub-prop, $sub-value in $value {
                    #{$sub-prop}: $sub-value;
                }
            }      
        } @else {
            #{$prop}: $value;
        }
    }
}



// -------
// Center
// -------

// Center | Total 
@mixin center-total($before: false, $after: false, $top: 50%, $left: 50%) {
    @if $before == false and $after == false {
        @include position(absolute, $top null null $left);
        transform: translate(-50%, -50%);
        margin: 0;
    }

    @else if $before {
        &::before {
            @include position(absolute, $top null null $left);
            transform: translate(-50%, -50%);
            margin: 0;
        }
    }

    @else if $after {
        &::after {
            @include position(absolute, $top null null $left);
            transform: translate(-50%, -50%);
            margin: 0;
        }        
    }   
}

// Center | Y
@mixin center-y($before: false, $after: false, $top: 50%) {
    @if $before == false and $after == false {
        @include position(absolute, $top null null null);
        transform: translateY(-50%);
        margin: 0;
    }

    @else if $before {
        &:before {
            @include position(absolute, $top null null null);
            transform: translateY(-50%);
            margin: 0;
        }
    }

    @else if $after {
        &:after {
            @include position(absolute, $top null null null);
            transform: translateY(-50%);
            margin: 0;
        }    
    }   
}

// Center | X
@mixin center-x($before: false, $left: 50%) {
    @if $before == false {
        position: absolute;
        left: $left;
        margin: 0;
        transform: translateX(-50%);
    }

    @else {
        &::before {
            position: absolute;
            left: $left;
            margin: 0;
            transform: translateX(-50%); 
        }
    }
}


// ----------
// Background
// ----------
@mixin background($filename, $position:0 0, $repeat:no-repeat, $cover:false) {
    $imagedir: '../assets/images/';
 
    background: {
        image: url(#{$imagedir}#{$filename});
        position: $position;
        repeat: $repeat;

        @if $cover {
            size: cover;
        }
    }
}


// -----
// Fonts
// -----

// Fonts | size
@mixin font-size($sizeValue: null) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}


// Fonts | Ico | Center
@mixin font-ico-center($height: 10px, $indent: 0) {
    &::before { 
        text-indent: $indent;
        line-height: $height;
        text-align: center;
    }
}

// Fonts | Ico | Position
@mixin font-ico-pos($top: null, $right: null, $bottom: null, $left: null) {
    &::before { 
        top: $top;
        right: $right;
        bottom: $bottom;
        left: $left;

    }
}

@mixin font-ico-size($sizee: 1.2) {
    &::before {
        @include font-size($sizee);
    }
}


// ----
// Other
// ----

// Bootstrap | Container
@mixin container {
    @include margin(null auto);
    @include padding(null 15px);

    &:before, &:after {
        content: " ";
        display: table; 
    }

    &:after {
        clear: both; 
    }

    @media #{$portable} {
        width: 100%; 
    }

    @media #{$desktop}  {
        width: $bootstrap-container-width-desktop; 
    } 
}

// Table | Cell
@mixin cell ($align: null) {
    display: table-cell;
    vertical-align: middle;

    @if $align {
        text-align: $align;
    }
}

// IMG | transforma imatge a 100% width o 100% height amb auto per a l'altre propietat
@mixin full-size ($tipus: 'width', $reset-max: null) {
    @if $tipus == 'width' {
        width: 100%;
        height: auto;
    }
    @else if $tipus == 'height' {
        width: auto;
        height: 100%;
    }

    @if $reset-max == true { max-width: none; }  
}

// IMG | Reseteja propietats img-responsive heredades de bootstrap
@mixin reset-size($tipus: 'width') {
    @if $tipus == 'width' {
        width: auto;
        max-width: none;
    }
    @else if $tipus == 'height' {
        height: auto;
        max-height: none;
    }
}








